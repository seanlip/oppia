# coding: utf-8
#
# Copyright 2024 The Oppia Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for voiecover service methods."""

from __future__ import annotations

import json
import os

from core import feconf
from core import schema_utils
from core import utils
from core.domain import exp_domain
from core.domain import state_domain
from core.domain import voiceover_domain
from core.domain import voiceover_services
from core.platform import models
from core.tests import test_utils

from typing import Dict

MYPY = False
if MYPY: # pragma: no cover
    from mypy_imports import voiceover_models

(voiceover_models,) = models.Registry.import_models([
    models.Names.VOICEOVER])


class EntityVoiceoversServicesTests(test_utils.GenericTestBase):
    def test_get_entity_voiceovers_returns_correctly(self) -> None:
        dummy_manual_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': False,
            'duration_secs': 6.1
        }
        dummy_autogenerated_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename2.mp3',
            'file_size_bytes': 3500,
            'needs_update': False,
            'duration_secs': 5.9
        }
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id', 1, 'en-US', {
                'content_0': {
                    feconf.VoiceoverType.MANUAL.value: (
                        dummy_manual_voiceover_dict),
                    feconf.VoiceoverType.AUTO.value: (
                        dummy_autogenerated_voiceover_dict)
                }
            }
        ).put()

        entity_voiceovers_instance = (
            voiceover_services.get_voiceovers_for_given_language_accent_code(
                'exploration', 'exp_id', 1, 'en-US'))

        self.assertEqual(entity_voiceovers_instance.entity_id, 'exp_id')
        self.assertEqual(entity_voiceovers_instance.entity_type, 'exploration')
        self.assertEqual(entity_voiceovers_instance.entity_version, 1)
        self.assertEqual(
            entity_voiceovers_instance.language_accent_code, 'en-US')
        automatic_voiceover = entity_voiceovers_instance.voiceovers_mapping[
            'content_0'][feconf.VoiceoverType.AUTO]
        manual_voiceover = entity_voiceovers_instance.voiceovers_mapping[
            'content_0'][feconf.VoiceoverType.MANUAL]
        assert isinstance(automatic_voiceover, state_domain.Voiceover)
        assert isinstance(manual_voiceover, state_domain.Voiceover)
        self.assertDictEqual(
            manual_voiceover.to_dict(),
            dummy_manual_voiceover_dict)
        self.assertDictEqual(
            automatic_voiceover.to_dict(),
            dummy_autogenerated_voiceover_dict)

    def test_get_entity_voiceovers_creates_new_entity(self) -> None:
        entity_voiceovers_instance = (
            voiceover_services.get_voiceovers_for_given_language_accent_code(
                'exploration', 'exp_id', 1, 'en-US'))

        self.assertEqual(entity_voiceovers_instance.entity_id, 'exp_id')
        self.assertEqual(entity_voiceovers_instance.entity_type, 'exploration')
        self.assertEqual(entity_voiceovers_instance.entity_version, 1)
        self.assertEqual(
            entity_voiceovers_instance.language_accent_code, 'en-US')
        self.assertDictEqual(entity_voiceovers_instance.voiceovers_mapping, {})

    def test_should_convert_domain_instance_to_model_instance(self) -> None:
        dummy_manual_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': False,
            'duration_secs': 6.1
        }
        dummy_autogenerated_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename2.mp3',
            'file_size_bytes': 3500,
            'needs_update': False,
            'duration_secs': 5.9
        }
        entity_voiceovers = voiceover_domain.EntityVoiceovers(
            entity_id='exp_id',
            entity_type=feconf.ENTITY_TYPE_EXPLORATION,
            entity_version=1,
            language_accent_code='en-IN',
            voiceovers_mapping={
                'content_0': {
                    feconf.VoiceoverType.MANUAL: (
                        state_domain.Voiceover.from_dict(
                            dummy_manual_voiceover_dict)
                    ),
                    feconf.VoiceoverType.AUTO: (
                        state_domain.Voiceover.from_dict(
                            dummy_autogenerated_voiceover_dict)
                    )
                }
            }
        )
        entity_voiceovers_model = (
            voiceover_services.create_entity_voiceovers_model(
                entity_voiceovers))

        self.assertEqual(
            entity_voiceovers.entity_id, entity_voiceovers_model.entity_id
        )
        self.assertEqual(
            entity_voiceovers.entity_type, entity_voiceovers_model.entity_type
        )
        self.assertEqual(
            entity_voiceovers.entity_version,
            entity_voiceovers_model.entity_version
        )
        self.assertEqual(
            entity_voiceovers.language_accent_code,
            entity_voiceovers_model.language_accent_code
        )
        manual_voiceover = (
            entity_voiceovers.voiceovers_mapping['content_0'][
                feconf.VoiceoverType.MANUAL])
        automatic_voiceover = (
            entity_voiceovers.voiceovers_mapping['content_0'][
                feconf.VoiceoverType.AUTO])
        assert isinstance(automatic_voiceover, state_domain.Voiceover)
        assert isinstance(manual_voiceover, state_domain.Voiceover)
        self.assertDictEqual(
            manual_voiceover.to_dict(),
            entity_voiceovers_model.voiceovers_mapping['content_0']['manual']
        )
        self.assertDictEqual(
            automatic_voiceover.to_dict(),
            entity_voiceovers_model.voiceovers_mapping['content_0']['auto']
        )

    def test_should_get_entity_voiceovers_by_exploration(self) -> None:
        dummy_manual_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': False,
            'duration_secs': 6.1
        }
        dummy_autogenerated_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename2.mp3',
            'file_size_bytes': 3500,
            'needs_update': False,
            'duration_secs': 5.9
        }
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id_1', 1, 'en-US', {
                'content_0': {
                    'manual': dummy_manual_voiceover_dict,
                    'auto': dummy_autogenerated_voiceover_dict
                    }
                }).put()
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id_2', 1, 'en-US', {
                'content_0': {
                    'manual': dummy_manual_voiceover_dict,
                    'auto': dummy_autogenerated_voiceover_dict
                    }
                }).put()
        retrieved_entity_voiceovers = (
            voiceover_services.get_entity_voiceovers_for_given_exploration(
                'exp_id_1', 'exploration', 1)
        )

        self.assertEqual(
            len(retrieved_entity_voiceovers), 1)

    def test_should_get_entity_voiceovers_by_exploration_and_language_code(
        self
    ) -> None:
        dummy_manual_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': False,
            'duration_secs': 6.1
        }
        dummy_autogenerated_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename2.mp3',
            'file_size_bytes': 3500,
            'needs_update': False,
            'duration_secs': 5.9
        }
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id_1', 1, 'en-US', {
                'content_0': {
                    'manual': dummy_manual_voiceover_dict,
                    'auto': dummy_autogenerated_voiceover_dict
                    }
                }).put()
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id_1', 1, 'en-IN', {
                'content_0': {
                    'manual': dummy_manual_voiceover_dict,
                    'auto': dummy_autogenerated_voiceover_dict
                    }
                }).put()
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id_1', 1, 'en-GB', {
                'content_0': {
                    'manual': dummy_manual_voiceover_dict,
                    'auto': dummy_autogenerated_voiceover_dict
                    }
                }).put()
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id_1', 1, 'en-NG', {}).put()
        language_codes_mapping: Dict[str, Dict[str, bool]] = {
            'en': {
                'en-US': True,
                'en-IN': True,
                'en-NG': True
            },
            'hi': {
                'hi-IN': False
            }
        }
        voiceover_services.save_language_accent_support(
            language_codes_mapping=language_codes_mapping)

        retrieved_entity_voiceovers = (
            voiceover_services.fetch_entity_voiceovers_by_language_code(
                'exp_id_1', 'exploration', 1, 'en')
        )

        self.assertEqual(
            len(retrieved_entity_voiceovers), 2)

    def test_should_compute_entity_voiceovers_model_successfully(
        self
    ) -> None:
        retrieved_entity_voiceovers = (
            voiceover_services.fetch_entity_voiceovers_by_language_code(
                'exp_id_1', 'exploration', 1, 'en')
        )
        self.assertEqual(
            len(retrieved_entity_voiceovers), 0)

        manual_voiceover_1: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': False,
            'duration_secs': 6.1
        }
        manual_voiceover_2: state_domain.VoiceoverDict = {
            'filename': 'filename2.mp3',
            'file_size_bytes': 3500,
            'needs_update': False,
            'duration_secs': 5.9
        }

        exploration = exp_domain.Exploration.create_default_exploration(
            'exp_id_1', title='Title', category='Category')
        exploration.add_states(['New state'])

        voiceover_changes = [
            exp_domain.ExplorationChange({
                'cmd': 'update_voiceovers',
                'language_accent_code': 'en-US',
                'content_id': 'content_0',
                'voiceovers': {
                    'manual': manual_voiceover_1
                }
            }),
            exp_domain.ExplorationChange({
                'cmd': 'update_voiceovers',
                'language_accent_code': 'en-US',
                'content_id': 'default_outcome_1',
                'voiceovers': {
                    'manual': manual_voiceover_2
                }
            })
        ]

        entity_voiceovers_models = (
            voiceover_services.compute_voiceover_related_change(
                updated_exploration=exploration,
                voiceover_changes=voiceover_changes
            )
        )

        voiceover_models.EntityVoiceoversModel.update_timestamps_multi(
            entity_voiceovers_models)
        voiceover_models.EntityVoiceoversModel.put_multi(
            entity_voiceovers_models)

        exploration.version += 1

        self.assertEqual(len(entity_voiceovers_models), 1)

        retrieved_voiceover_1 = (
            entity_voiceovers_models[0].voiceovers_mapping[
                'content_0']['manual'])
        retrieved_voiceover_2 = (
            entity_voiceovers_models[0].voiceovers_mapping[
                'default_outcome_1']['manual'])

        self.assertDictEqual(
            retrieved_voiceover_1, manual_voiceover_1
        )
        self.assertDictEqual(
            retrieved_voiceover_2, manual_voiceover_2
        )

        manual_voiceover_3: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': True,
            'duration_secs': 6.1
        }

        voiceover_changes = [
            exp_domain.ExplorationChange({
                'cmd': 'update_voiceovers',
                'language_accent_code': 'en-US',
                'content_id': 'content_0',
                'voiceovers': {
                    'manual': manual_voiceover_3
                }
            }),
            exp_domain.ExplorationChange({
                'cmd': 'update_voiceovers',
                'language_accent_code': 'en-US',
                'content_id': 'default_outcome_1',
                'voiceovers': {}
            })
        ]

        entity_voiceovers_models = (
            voiceover_services.compute_voiceover_related_change(
                updated_exploration=exploration,
                voiceover_changes=voiceover_changes
            )
        )

        self.assertEqual(len(entity_voiceovers_models), 1)

        retrieved_voiceover_3 = (
            entity_voiceovers_models[0].voiceovers_mapping[
                'content_0']['manual'])

        self.assertDictEqual(
            retrieved_voiceover_3, manual_voiceover_3
        )


class VoiceoverAutogenerationPolicyTests(test_utils.GenericTestBase):
    """Unit tests to validate the saving and fetching behavior in the
    VoiceoverAutogenerationPolicyModel.
    """

    def test_save_and_get_language_accent_codes_works_correctly(self) -> None:
        language_codes_mapping: Dict[str, Dict[str, bool]] = {
            'en': {
                'en-US': True
            },
            'hi': {
                'hi-IN': False
            }
        }
        retrieved_language_codes_mapping: Dict[str, Dict[str, bool]] = (
            voiceover_services.get_all_language_accent_codes_for_voiceovers())
        expected_language_codes_mapping: Dict[str, Dict[str, bool]] = {}
        self.assertDictEqual(
            retrieved_language_codes_mapping, expected_language_codes_mapping)

        voiceover_services.save_language_accent_support(
            language_codes_mapping=language_codes_mapping)

        retrieved_language_codes_mapping = (
            voiceover_services.get_all_language_accent_codes_for_voiceovers())
        self.assertDictEqual(
            retrieved_language_codes_mapping, language_codes_mapping)

    def test_get_and_set_azure_config_for_automatic_voiceovers(self) -> None:
        voiceover_autogeneration_policy_model = (
            voiceover_models.VoiceoverAutogenerationPolicyModel(
                id=voiceover_models.VOICEOVER_AUTOGENERATION_POLICY_ID)
        )
        voiceover_autogeneration_policy_model.language_codes_mapping = {}
        (
            voiceover_autogeneration_policy_model.
            autogenerated_voiceovers_are_enabled
        ) = True
        voiceover_autogeneration_policy_model.update_timestamps()
        voiceover_autogeneration_policy_model.put()

        self.assertTrue(
            voiceover_services.
            is_voiceover_autogeneration_using_cloud_service_enabled()
        )

        voiceover_services.update_admin_config_for_voiceover_autogeneration(
            False)

        self.assertFalse(
            voiceover_services.
            is_voiceover_autogeneration_using_cloud_service_enabled()
        )


class VoiceoversLanguageAccentConstantsTests(test_utils.GenericTestBase):
    """Unit tests to validate the language-accent information saved as
    constants in the JSON files.
    """

    def test_get_language_accent_master_list_works_correctly(self) -> None:
        file_path = os.path.join(
            feconf.VOICEOVERS_DATA_DIR, 'language_accent_master_list.json')
        with utils.open_file(file_path, 'r') as f:
            language_accent_master_list: Dict[str, Dict[str, str]] = (
                json.loads(f.read()))
            expected_language_accent_master_list = (
                voiceover_services.get_language_accent_master_list())

            self.assertDictEqual(
                language_accent_master_list,
                expected_language_accent_master_list)

    def test_get_autogeneratable_language_accent_list_works_correctly(
        self
    ) -> None:
        file_path = os.path.join(
            feconf.VOICEOVERS_DATA_DIR,
            'autogeneratable_language_accent_list.json')
        with utils.open_file(file_path, 'r') as f:
            autogeneratable_language_accent_list: Dict[str, Dict[str, str]] = (
                json.loads(f.read()))
            expected_autogeneratable_language_accent_list = (
                voiceover_services.get_autogeneratable_language_accent_list())

            self.assertDictEqual(
                autogeneratable_language_accent_list,
                expected_autogeneratable_language_accent_list)

    def test_validate_data_format_stored_in_master_list_is_correct(
        self
    ) -> None:
        valid_schema = {
            'type': 'variable_keys_dict',
            'keys': {
                'schema': {
                    'type': 'basestring'
                }
            },
            'values': {
                'schema': {
                    'type': 'variable_keys_dict',
                    'keys': {
                        'schema': {
                            'type': 'basestring'
                        }
                    },
                    'values': {
                        'schema': {
                            'type': 'basestring'
                        }
                    }
                }
            }
        }
        try:
            schema_utils.normalize_against_schema(
                voiceover_services.get_language_accent_master_list(),
                valid_schema)
        except Exception:
            self.fail(
                'get_language_accent_master_list() raised '
                'ExceptionType unexpectedly!')

    def test_validate_data_format_stored_in_autogeneratable_list_is_correct(
        self
    ) -> None:
        valid_schema = {
            'type': 'variable_keys_dict',
            'keys': {
                'schema': {
                    'type': 'basestring'
                }
            },
            'values': {
                'schema': {
                    'type': 'dict',
                    'properties': [{
                        'name': 'service',
                        'schema': {
                            'type': 'basestring'
                        }
                    }, {
                        'name': 'voice_code',
                        'schema': {
                            'type': 'basestring'
                        }
                    }]
                }
            }
        }
        try:
            schema_utils.normalize_against_schema(
                voiceover_services.get_autogeneratable_language_accent_list(),
                valid_schema)
        except Exception:
            self.fail(
                'get_autogeneratable_language_accent_list() raised '
                'ExceptionType unexpectedly!')

    def test_validate_autogeneratable_list_is_subset_of_master_list(
        self
    ) -> None:
        language_accent_master_list = []
        for accent_code_to_description in (
                voiceover_services.get_language_accent_master_list().values()):
            for lang_accent_code in accent_code_to_description.keys():
                language_accent_master_list.append(lang_accent_code)
        autogeneratable_langauge_accent_codes = list(
            voiceover_services.
            get_autogeneratable_language_accent_list().keys())

        self.assertTrue(
            set(language_accent_master_list).issuperset(
                set(autogeneratable_langauge_accent_codes)))

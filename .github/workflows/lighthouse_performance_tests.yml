name: Lighthouse performance tests
on:
  workflow_run:
    workflows: [Prepare environment for full-stack tests]
    types: [completed]

jobs:
  identify_suites_to_run:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Identify which suites to run
    steps:
      - name: Download suites-to-run mapping
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: suites-to-run
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Parse suites-to-run mapping
        runs-on: ubuntu-22.04
        id: set_test_suites_to_run
        run: echo "TEST_SUITES_JSON=$(cat ./suites-to-run.json)" >> "$GITHUB_OUTPUT"
    outputs:
      test_suites_to_run: ${{ fromJSON(steps.set_test_suites_to_run.outputs.TEST_SUITES_JSON) }}
  lighthouse_performance_test:
    needs: [identify_suites_to_run]
    runs-on: ubuntu-22.04
    if: ${{ needs.identify_suites_to_run.outputs.test_suites_to_run.lighthouse_performance.count > 0 }}
    strategy:
      matrix:
        suite: ${{ needs.identify_suites_to_run.outputs.test_suites_to_run.lighthouse_performance.suites }}
    name: Run Lighthouse performance tests (shard ${{ matrix.suite.name }})
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Merge develop and set up Python
        uses: ./.github/actions/merge-develop-and-setup-python
        with:
          use_cache: false
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: /home/runner/work/oppia/yarn_cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Attempt to download build files artifact
        id: download_artifact_1
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: build_files
          path: /home/runner/work/oppia/
      - name: Unzip build files
        if: steps.download_artifact_1.outcome != 'failure'
        run: |
          ls -la
          unzip build_files.zip
          rm build_files.zip
          echo "Files in ./:"
          ls -la .
          echo "Files in oppia_tools:"
          ls -la oppia_tools
          echo "Files in oppia:"
          ls -la oppia
          echo "Files in build:"
          ls -la oppia/build
          echo "Files in third_party:"
          ls -la oppia/third_party
        working-directory: /home/runner/work/oppia
        shell: bash
      - name: (Artifact re-build) Cache third_party/static
        if: steps.download_artifact_1.outcome == 'failure'
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: /home/runner/work/oppia/oppia/third_party/static
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('dependencies.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: (Artifact re-build) Build Webpack
        if: steps.download_artifact_1.outcome == 'failure'
        run: python -m scripts.build --prod_env
      - name: Install Oppia dependencies
        uses: ./.github/actions/install-oppia-dependencies
      - name: Install chrome
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: python -m scripts.install_chrome_for_ci
      - name: Run Lighthouse performance checks (shard ${{ matrix.suite.name }})
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: python -m scripts.run_lighthouse_tests --mode performance --skip_build --record_screen --pages ${{ join(matrix.suite.pages_to_run, ',') }}
      - name: Uploading puppeteer video as Artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: lhci-puppeteer-video
          path: /home/runner/work/oppia/lhci-puppeteer-video/video.mp4
      - name: Report failure if failed on oppia/oppia develop branch
        if: ${{ failure() && github.event_name == 'push' && github.repository == 'oppia/oppia' && github.ref == 'refs/heads/develop'}}
        uses: ./.github/actions/send-webhook-notification
        with:
          message: "A Lighthouse performance test failed on the upstream develop branch."
          webhook-url: ${{ secrets.BUILD_FAILURE_ROOM_WEBHOOK_URL }}
  # This is needed because we cannot make each lighthouse performance task a "required" check
  # via GitHub, since different tasks may execute depending on which files are modified in
  # the PR.
  check_lighthouse_performance_workflow_status:
    name: Check that all necessary lighthouse performance tests pass
    needs: [identify_suites_to_run, lighthouse_performance_test]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Merge develop and set up Python
        uses: ./.github/actions/merge-develop-and-setup-python
        with:
          use_cache: false
      - name: Check workflow status
        uses: ./.github/actions/check-workflow-status
        id: check_workflow_status
        with:
          jobs: ${{ toJson(needs) }}
      - name: Fail if workflow status is failure
        if: ${{ steps.check_workflow_status.outputs.WORKFLOW_STATUS == 'failure' }}
        run: exit 1

name: Prepare env for full-stack tests
on:
  merge_group:
    types: [checks_requested]
  push:
    branches:
      - develop
      - release-*
  pull_request:
    branches:
      - develop
      - release-*

jobs:
  e2e_acceptance_coverage:
    name: Verify all e2e/acceptance tests are included
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository so that local actions can be used
        uses: actions/checkout@v4
      - name: Merge develop and set up Python
        uses: ./.github/actions/merge-develop-and-setup-python
        with:
          use_cache: false
      - name: Check that all e2e and acceptance test files are captured in wdio.conf.js and core/tests/ci-test-suite-configs
        run: make run_tests.check_tests_are_captured_in_ci
      - name: Report failure if failed on oppia/oppia develop branch
        if: ${{ failure() && github.event_name == 'push' && github.repository == 'oppia/oppia' && github.ref == 'refs/heads/develop'}}
        uses: ./.github/actions/send-webhook-notification
        with:
          message: "The e2e/acceptance coverage test failed on the upstream develop branch."
          webhook-url: ${{ secrets.BUILD_FAILURE_ROOM_WEBHOOK_URL }}
  check_test_suites_to_run:
    name: Compute which tests to run
    runs-on: ubuntu-22.04
    outputs:
      TEST_SUITES_TO_RUN: ${{ steps.compute_test_suites.outputs.TEST_SUITES_TO_RUN }}
    steps:
      - name: Checkout repository so that local actions can be used
        uses: actions/checkout@v4
        with:
          # This fetches all git refs, which is needed in the
          # check_ci_test_suites_to_run script below.
          fetch-depth: 0
      - name: Merge develop and set up Python
        uses: ./.github/actions/merge-develop-and-setup-python
      - name: Install Oppia dependencies
        uses: ./.github/actions/install-oppia-dependencies
      - id: compute_test_suites
        name: Check test suites to run
        env:
          SHOULD_OUTPUT_ALL_TESTS: ${{ github.event_name != 'pull_request' || vars.RUN_SUITES_ON_CHANGED_FILES == 'false' }}
        # This writes the output to both ./suites-to-run.json and $GITHUB_OUTPUT.
        run: >
          echo "TEST_SUITES_TO_RUN=";
          python -m scripts.check_ci_test_suites_to_run
          --github_head_ref="HEAD"
          --github_base_ref="origin/${{ github.event.pull_request.base.ref }}"
          ${{ env.SHOULD_OUTPUT_ALL_TESTS == 'true' && '--output_all_test_suites' || '' }} | tee ./suites-to-run.json "$GITHUB_OUTPUT"
        shell: bash
      - name: Upload suites-to-run mapping as a GitHub artifact
        uses: actions/upload-artifact@v4
        with:
          name: suites-to-run
          path: suites-to-run.json
      - name: Upload root files mapping as a GitHub artifact
        uses: actions/upload-artifact@v4
        with:
          name: root-files-mapping
          path: root-files-mapping.json
  build:
    name: Build the app, and store build files as an artifact
    needs: check_test_suites_to_run
    runs-on: ubuntu-22.04
    if: ${{ fromJson(needs.check_test_suites_to_run.outputs.TEST_SUITES_TO_RUN).e2e.count > 0 ||
            fromJson(needs.check_test_suites_to_run.outputs.TEST_SUITES_TO_RUN).lighthouse_performance.count > 0 ||
            fromJson(needs.check_test_suites_to_run.outputs.TEST_SUITES_TO_RUN).acceptance.docker.count > 0 ||
            fromJson(needs.check_test_suites_to_run.outputs.TEST_SUITES_TO_RUN).acceptance.python.count > 0 }}
    steps:
      - name: Checkout repository so that local actions can be used
        uses: actions/checkout@v4
      - name: Merge develop and set up Python
        uses: ./.github/actions/merge-develop-and-setup-python
        with:
          use_cache: true
      - name: Cache node modules and third_party/static
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            /home/runner/work/oppia/yarn_cache
            /home/runner/work/oppia/oppia/third_party/static
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock', 'dependencies.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Oppia dependencies
        uses: ./.github/actions/install-oppia-dependencies
      - name: Install Chrome
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: ./.github/actions/install-chrome
      - name: Install ffmpeg
        run: sudo apt install ffmpeg
      - name: Build Webpack
        run: python -m scripts.build --prod_env
      - name: Zip build files
        # We avoid using ../ or absolute paths because unzip treats these as
        # security issues and will refuse to follow them.
        run: |
          zip -rqy build_files.zip oppia/third_party oppia_tools oppia/build oppia/webpack_bundles oppia/proto_files oppia/app.yaml oppia/assets/hashes.json oppia/proto_files oppia/extensions/classifiers/proto/* oppia/backend_prod_files oppia/dist
        working-directory: /home/runner/work/oppia
      - name: Upload build files artifact
        uses: actions/upload-artifact@v4
        with:
          name: build_files
          path: /home/runner/work/oppia/build_files.zip
          retention-days: 1

name: Prepare environment for full-stack tests
on:
  merge_group:
    types: [checks_requested]
  push:
    branches:
      - develop
      - release-*
  pull_request:
    branches:
      - develop
      - release-*

jobs:
  e2e_acceptance_coverage:
    name: Verify all e2e/acceptance tests are included
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository so that local actions can be used
        uses: actions/checkout@v4
      - name: Merge develop and set up Python
        uses: ./.github/actions/merge-develop-and-setup-python
        with:
          use_cache: false
      - name: Check that all e2e and acceptance test files are captured in wdio.conf.js and core/tests/ci-test-suite-configs
        run: make run_tests.check_tests_are_captured_in_ci
      - name: Report failure if failed on oppia/oppia develop branch
        if: ${{ failure() && github.event_name == 'push' && github.repository == 'oppia/oppia' && github.ref == 'refs/heads/develop'}}
        uses: ./.github/actions/send-webhook-notification
        with:
          message: "The e2e/acceptance coverage test failed on the upstream develop branch."
          webhook-url: ${{ secrets.BUILD_FAILURE_ROOM_WEBHOOK_URL }}
  check_test_suites_to_run:
    name: Compute which tests to run
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository so that local actions can be used
        uses: actions/checkout@v4
      - name: Check which test suites to run based on PR changes
        uses: ./.github/actions/check-test-suites-to-run
        id: test_suites_to_run
  build:
    name: Build the app, and store build files as an artifact
    needs: check_test_suites_to_run
    if: ${{ fromJson(needs.check_test_suites_to_run.outputs.test_suites_to_run).e2e.count > 0 ||
            fromJson(needs.check_test_suites_to_run.outputs.test_suites_to_run).lighthouse_performance.count > 0 ||
            fromJson(needs.check_test_suites_to_run.outputs.test_suites_to_run).acceptance.docker.count > 0 ||
            fromJson(needs.check_test_suites_to_run.outputs.test_suites_to_run).acceptance.python.count > 0 }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository so that local actions can be used
        uses: actions/checkout@v4
      - name: Merge develop and set up Python
        uses: ./.github/actions/merge-develop-and-setup-python
        with:
          use_cache: true
      - name: Cache node modules and third_party/static
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            /home/runner/work/oppia/yarn_cache
            /home/runner/work/oppia/oppia/third_party/static
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock', 'dependencies.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Oppia dependencies
        uses: ./.github/actions/install-oppia-dependencies
      - name: Install Chrome
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: ./.github/actions/install-chrome
      - name: Install ffmpeg
        run: sudo apt install ffmpeg
      - name: Build Webpack
        run: python -m scripts.build --prod_env
      - name: Zip build files
        # We avoid using ../ or absolute paths because unzip treats these as
        # security issues and will refuse to follow them.
        run: |
          zip -rqy build_files.zip oppia/third_party oppia_tools oppia/build oppia/webpack_bundles oppia/proto_files oppia/app.yaml oppia/assets/hashes.json oppia/proto_files oppia/extensions/classifiers/proto/* oppia/backend_prod_files oppia/dist
        working-directory: /home/runner/work/oppia
      - name: Upload build files artifact
        uses: actions/upload-artifact@v4
        with:
          name: build_files
          path: /home/runner/work/oppia/build_files.zip
          retention-days: 1

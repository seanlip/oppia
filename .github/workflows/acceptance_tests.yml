name: Acceptance tests
on:
  workflow_run:
    workflows: [Prepare environment for full-stack tests]
    types: [completed]

jobs:
  identify_suites_to_run:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Identify which suites to run
    steps:
      - name: Download suites-to-run mapping
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: suites-to-run
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Parse suites-to-run mapping
        runs-on: ubuntu-22.04
        id: set_test_suites_to_run
        run: echo "TEST_SUITES_JSON=$(cat ./suites-to-run.json)" >> "$GITHUB_OUTPUT"
    outputs:
      test_suites_to_run: ${{ fromJSON(steps.set_test_suites_to_run.outputs.TEST_SUITES_JSON) }}
  acceptance_test:
    needs: [identify_suites_to_run]
    runs-on: ubuntu-22.04
    if: ${{ needs.identify_suites_to_run.outputs.test_suites_to_run.acceptance.python.count > 0 }}
    strategy:
      matrix:
        suite: ${{ needs.identify_suites_to_run.outputs.test_suites_to_run.acceptance.python.suites }}
    name: acceptance_test (${{ matrix.suite.name }} -- old installation)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Merge develop and set up Python
        uses: ./.github/actions/merge-develop-and-setup-python
        with:
          use_cache: true
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: /home/runner/work/oppia/yarn_cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Attempt to download build files artifact
        id: download_artifact_1
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: build_files
          path: /home/runner/work/oppia/
      - name: Unzip build files
        if: steps.download_artifact_1.outcome != 'failure'
        run: |
          ls -la
          unzip build_files.zip
          rm build_files.zip
          echo "Files in ./:"
          ls -la .
          echo "Files in oppia_tools:"
          ls -la oppia_tools
          echo "Files in oppia:"
          ls -la oppia
          echo "Files in build:"
          ls -la oppia/build
          echo "Files in third_party:"
          ls -la oppia/third_party
        working-directory: /home/runner/work/oppia
        shell: bash
      - name: Install Oppia dependencies
        uses: ./.github/actions/install-oppia-dependencies
      - name: (Artifact re-build) Cache third_party/static
        if: steps.download_artifact_1.outcome == 'failure'
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: /home/runner/work/oppia/oppia/third_party/static
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('dependencies.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: (Artifact re-build) Build Webpack
        if: steps.download_artifact_1.outcome == 'failure'
        run: python -m scripts.build --prod_env
      - name: Run Desktop Acceptance Test ${{ matrix.suite.name }}
        run: xvfb-run -a --server-args="-screen 0, 1285x1000x24" python -m scripts.run_acceptance_tests --skip-build --suite=${{ matrix.suite.name }} --prod_env
      - name: Uploading generated test to angular module mapping as an artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: generated-test-to-angular-module-mapping
          path: /home/runner/work/oppia/oppia/core/tests/test-modules-mappings/acceptance/${{ matrix.suite.name }}.txt
      - name: Run Mobile Acceptance Test ${{ matrix.suite.name }}
        run: xvfb-run -a --server-args="-screen 0, 1285x1000x24" python -m scripts.run_acceptance_tests --skip-build --suite=${{ matrix.suite.name }} --prod_env --mobile
      - name: Uploading webpack bundles as an artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: webpack-bundles
          path: /home/runner/work/oppia/oppia/build
      - name: Report failure if failed on oppia/oppia develop branch
        if: ${{
          failure() &&
          github.event_name == 'push' &&
          github.repository == 'oppia/oppia' &&
          github.ref == 'refs/heads/develop'
          }}
        uses: ./.github/actions/send-webhook-notification
        with:
          message: "An acceptance test failed on the upstream develop branch."
          webhook-url: ${{ secrets.BUILD_FAILURE_ROOM_WEBHOOK_URL }}
acceptance_test_with_docker:
    needs: [identify_suites_to_run]
    runs-on: ubuntu-22.04
    if: ${{ needs.identify_suites_to_run.outputs.test_suites_to_run.acceptance.docker.count > 0 }}
    strategy:
      matrix:
        suite: ${{ needs.identify_suites_to_run.outputs.test_suites_to_run.acceptance.docker.suites }}
    name: acceptance_test (${{ matrix.suite.name }})
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: '3.8.15'
          architecture: 'x64'
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Merge develop branch into the current branch
        uses: ./.github/actions/merge
      - name: Install Chrome
        uses: ./.github/actions/install-chrome
      - name: Initializing Containers
        run: |
          make build
          docker compose up angular-build -d
          # This is required as lighthouse tests are run on the host machine and not in the docker container.
          sudo docker cp oppia-angular-build:/app/oppia/node_modules .
      - name: Run Desktop Acceptance Test ${{ matrix.suite.name }}
        run: xvfb-run -a --server-args="-screen 0, 1285x1000x24" make run_tests.acceptance suite=${{ matrix.suite.name }}
      - name: Uploading generated test to angular module mapping as an artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: generated-test-to-angular-module-mapping
          path: /home/runner/work/oppia/oppia/core/tests/test-modules-mappings/acceptance/${{ matrix.suite.name }}.txt
      - name: Run Mobile Acceptance Test ${{ matrix.suite.name }}
        run: xvfb-run -a --server-args="-screen 0, 1285x1000x24" make run_tests.acceptance suite=${{ matrix.suite.name }} MOBILE=true
      - name: Report failure if failed on oppia/oppia develop branch
        if: ${{
          failure() &&
          github.event_name == 'push' &&
          github.repository == 'oppia/oppia' &&
          github.ref == 'refs/heads/develop'
          }}
        uses: ./.github/actions/send-webhook-notification
        with:
          message: "An acceptance test failed on the upstream develop branch."
          webhook-url: ${{ secrets.BUILD_FAILURE_ROOM_WEBHOOK_URL }}
  # This is needed because we cannot make each acceptance task a "required" check via GitHub,
  # since different tasks may execute depending on which files are modified in the PR.
  check_acceptance_workflow_status:
    name: Check that all necessary acceptance tests pass
    needs: [identify_suites_to_run, acceptance_test]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Merge develop and set up Python
        uses: ./.github/actions/merge-develop-and-setup-python
        with:
          use_cache: false
      - name: Check workflow status
        uses: ./.github/actions/check-workflow-status
        id: check_workflow_status
        with:
          jobs: ${{ toJson(needs) }}
      - name: Fail if workflow status is failure
        if: ${{ steps.check_workflow_status.outputs.WORKFLOW_STATUS == 'failure' }}
        run: exit 1
